# # utils/qa_module.py
# import streamlit as st
# from utils.voice_utils import listen_to_voice, speak_text
# from transformers import pipeline
# from database import insert_question
# import pandas as pd


# qa_model = pipeline("question-answering", model="mrm8488/bert-multi-cased-finetuned-xquadv1")

# SCHEME_DETAILS = {
#     "рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдЬрди рдзрди рдпреЛрдЬрдирд╛": {
#         "desc": "рдпрд╣ рдпреЛрдЬрдирд╛ рдЧрд░реАрдмреЛрдВ рдХреЛ рдмреИрдВрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛рдУрдВ рд╕реЗ рдЬреЛрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП рдмрдирд╛рдИ рдЧрдИ рд╣реИред рдЗрд╕рдореЗрдВ рдореБрдлреНрдд рдмреИрдВрдХ рдЦрд╛рддрд╛, рдбреЗрдмрд┐рдЯ рдХрд╛рд░реНрдб рдФрд░ рдмреАрдорд╛ рдХрд╡рд░ рдорд┐рд▓рддрд╛ рд╣реИред",
#         "link": "https://pmjdy.gov.in"
#     },
#     "рдореБрджреНрд░рд╛ рд▓реЛрди рдпреЛрдЬрдирд╛": {
#         "desc": "рдпрд╣ рдпреЛрдЬрдирд╛ рдЫреЛрдЯреЗ рдХрд╛рд░реЛрдмрд╛рд░реЛрдВ рдХреЛ рдмрд┐рдирд╛ рдЧрд╛рд░рдВрдЯреА рд▓реЛрди рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП рд╣реИред рдЗрд╕рдореЗрдВ рд╢рд┐рд╢реБ, рдХрд┐рд╢реЛрд░ рдФрд░ рддрд░реБрдг рд╢реНрд░реЗрдгрд┐рдпрд╛рдБ рд╣реИрдВред",
#         "link": "https://www.mudra.org.in"
#     },
#     "рд╕реБрдХрдиреНрдпрд╛ рд╕рдореГрджреНрдзрд┐ рдпреЛрдЬрдирд╛": {
#         "desc": "рдмреЗрдЯрд┐рдпреЛрдВ рдХреА рд╢рд┐рдХреНрд╖рд╛ рдФрд░ рд╢рд╛рджреА рдХреЗ рд▓рд┐рдП рдмрдЪрдд рдпреЛрдЬрдирд╛ред рдпрд╣ рдЙрдЪреНрдЪ рдмреНрдпрд╛рдЬ рджрд░ рдФрд░ рдЯреИрдХреНрд╕ рдореЗрдВ рдЫреВрдЯ рджреЗрддреА рд╣реИред",
#         "link": "https://www.nsiindia.gov.in"
#     },
#     "рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдорд╛рддреГ рд╡рдВрджрдирд╛ рдпреЛрдЬрдирд╛": {
#         "desc": "рдпрд╣ рдпреЛрдЬрдирд╛ рдЧрд░реНрднрд╡рддреА рдорд╣рд┐рд▓рд╛рдУрдВ рдХреЛ рдкреЛрд╖рдг рдФрд░ рджреЗрдЦрднрд╛рд▓ рдХреЗ рд▓рд┐рдП рдЖрд░реНрдерд┐рдХ рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░рддреА рд╣реИред",
#         "link": "https://wcd.nic.in/schemes/pradhan-mantri-matru-vandana-yojana"
#     },
#     "рд░рд╛рд╖реНрдЯреНрд░реАрдп рдмрд╛рд▓рд┐рдХрд╛ рд╕рдореГрджреНрдзрд┐ рдпреЛрдЬрдирд╛": {
#         "desc": "рдпрд╣ рдпреЛрдЬрдирд╛ рдЧрд░реАрдм рдкрд░рд┐рд╡рд╛рд░реЛрдВ рдХреА рдмрд╛рд▓рд┐рдХрд╛рдУрдВ рдХреЛ рдЬрдиреНрдо рд╕реЗ рд▓реЗрдХрд░ рд╢рд┐рдХреНрд╖рд╛ рддрдХ рдЖрд░реНрдерд┐рдХ рд╕рд╣рд╛рдпрддрд╛ рджреЗрддреА рд╣реИред",
#         "link": "https://wcd.nic.in/schemes/national-scheme-incentive-girl-child-secondary-education"
#     },
#     "рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдЙрдЬреНрдЬреНрд╡рд▓рд╛ рдпреЛрдЬрдирд╛": {
#         "desc": "рдпрд╣ рдпреЛрдЬрдирд╛ рдЧрд░реАрдмреА рд░реЗрдЦрд╛ рд╕реЗ рдиреАрдЪреЗ рд░рд╣рдиреЗ рд╡рд╛рд▓реА рдорд╣рд┐рд▓рд╛рдУрдВ рдХреЛ рдореБрдлреНрдд LPG рдЧреИрд╕ рдХрдиреЗрдХреНрд╢рди рджреЗрддреА рд╣реИред",
#         "link": "https://www.pmuy.gov.in"
#     },
#     "рдПрд▓рдЖрдИрд╕реА рдЬреАрд╡рди рдмреАрдорд╛": {
#         "desc": "рдЬреАрд╡рди рдмреАрдорд╛ рдХреЗ рд▓рд┐рдП рднрд╛рд░рдд рд╕рд░рдХрд╛рд░ рдХреА рднрд░реЛрд╕реЗрдордВрдж рдпреЛрдЬрдирд╛, рдЬрд┐рд╕рд╕реЗ рдкрд░рд┐рд╡рд╛рд░ рдХреЛ рдЖрд░реНрдерд┐рдХ рд╕реБрд░рдХреНрд╖рд╛ рдорд┐рд▓рддреА рд╣реИред",
#         "link": "https://licindia.in"
#     },
#     "рдПрдирдкреАрдПрд╕ рдпреЛрдЬрдирд╛": {
#         "desc": "рд░рд╛рд╖реНрдЯреНрд░реАрдп рдкреЗрдВрд╢рди рдпреЛрдЬрдирд╛ рдЬреЛ рд░рд┐рдЯрд╛рдпрд░рдореЗрдВрдЯ рдХреЗ рдмрд╛рдж рдЖрд░реНрдерд┐рдХ рд╕реБрд░рдХреНрд╖рд╛ рджреЗрддреА рд╣реИред",
#         "link": "https://enps.nsdl.com"
#     },
#     "рдЖрдВрдЧрдирд╡рд╛рдбрд╝реА рд▓рд╛рдн рдпреЛрдЬрдирд╛": {
#         "desc": "рдмрдЪреНрдЪреЛрдВ, рдЧрд░реНрднрд╡рддреА рдорд╣рд┐рд▓рд╛рдУрдВ рдФрд░ рдзрд╛рддреНрд░реА рдорд╛рддрд╛рдУрдВ рдХреЛ рдкреЛрд╖рдг рдФрд░ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реЗрд╡рд╛рдПрдВ рдкреНрд░рджрд╛рди рдХрд░рдиреЗ рд╡рд╛рд▓реА рдпреЛрдЬрдирд╛ред",
#         "link": "https://icds-wcd.nic.in"
#     },
#     "рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдЬреАрд╡рди рдЬреНрдпреЛрддрд┐ рдмреАрдорд╛ рдпреЛрдЬрдирд╛": {
#         "desc": "рдпрд╣ рдПрдХ рдЬреАрд╡рди рдмреАрдорд╛ рдпреЛрдЬрдирд╛ рд╣реИ рдЬрд┐рд╕рдореЗрдВ рд╡рд╛рд░реНрд╖рд┐рдХ рдкреНрд░реАрдорд┐рдпрдо рдкрд░ тВ╣2 рд▓рд╛рдЦ рдХрд╛ рдмреАрдорд╛ рдХрд╡рд░ рдорд┐рд▓рддрд╛ рд╣реИред",
#         "link": "https://jansuraksha.gov.in/Files/PMJJBY/English/AboutPMJJBY.pdf"
#     },
#     "рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рд╕реБрд░рдХреНрд╖рд╛ рдмреАрдорд╛ рдпреЛрдЬрдирд╛": {
#         "desc": "тВ╣12 рд╕рд╛рд▓рд╛рдирд╛ рдкреНрд░реАрдорд┐рдпрдо рдкрд░ тВ╣2 рд▓рд╛рдЦ рдХрд╛ рдПрдХреНрд╕реАрдбреЗрдВрдЯ рдмреАрдорд╛ред",
#         "link": "https://jansuraksha.gov.in/Files/PMSBY/English/AboutPMSBY.pdf"
#     },
#     "рд░рд╛рд╖реНрдЯреНрд░реАрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рдмреАрдорд╛ рдпреЛрдЬрдирд╛": {
#         "desc": "рдЧрд░реАрдм рдкрд░рд┐рд╡рд╛рд░реЛрдВ рдХреЛ рдЕрд╕реНрдкрддрд╛рд▓ рдореЗрдВ рдЗрд▓рд╛рдЬ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╛рд╕реНрдереНрдп рдмреАрдорд╛ рд╕реБрд╡рд┐рдзрд╛ рдкреНрд░рджрд╛рди рдХрд░рддреА рд╣реИред",
#         "link": "https://www.india.gov.in/national-health-insurance-scheme"
#     }
# }


# def qa_interface():
#     st.subheader("ЁЯза рд╡рд┐рддреНрддреАрдп рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ")

#     if st.button("ЁЯОд рдЖрд╡рд╛рдЬрд╝ рд╕реЗ рдкреВрдЫреЗрдВ"):
#         question = listen_to_voice()
#         st.write("рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓:", question)

#         context = "рднрд╛рд░рдд рд╕рд░рдХрд╛рд░ рдХрдИ рд╡рд┐рддреНрддреАрдп рдпреЛрдЬрдирд╛рдПрдВ рдЪрд▓рд╛рддреА рд╣реИ рдЬреИрд╕реЗ рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдЬрди рдзрди рдпреЛрдЬрдирд╛, рд╕реБрдХрдиреНрдпрд╛ рд╕рдореГрджреНрдзрд┐ рдпреЛрдЬрдирд╛, рдПрд▓рдЖрдИрд╕реА рдмреАрдорд╛, рдПрдирдкреАрдПрд╕ рдпреЛрдЬрдирд╛, рдореБрджреНрд░рд╛ рд▓реЛрди рдпреЛрдЬрдирд╛ рдЖрджрд┐ред"
#         response = qa_model(question=question, context=context)
#         answer = response['answer']

#         # Log to DB
#         insert_question(question, answer)

#         # Match with known schemes
#         matching_scheme = None
#         for scheme in SCHEME_DETAILS:
#             if scheme in answer:
#                 matching_scheme = scheme
#                 break

#         if matching_scheme:
#             details = SCHEME_DETAILS[matching_scheme]
#             full_answer = f"{answer}\n\n{details['desc']}\n\nЁЯУО [рдпреЛрдЬрдирд╛ рд╡рд┐рд╡рд░рдг рд╡ рдкрдВрдЬреАрдХрд░рдг рд▓рд┐рдВрдХ]({details['link']})"
#         else:
#             full_answer = answer

#         st.success(full_answer)
#         speak_text(full_answer)

import streamlit as st
from utils.voice_utils import listen_to_voice, speak_text
from transformers import pipeline
from database import insert_question
import pandas as pd

qa_model = pipeline("question-answering", model="mrm8488/bert-multi-cased-finetuned-xquadv1")

@st.cache_data
def load_schemes():
    df = pd.read_csv("her_schemes.csv", quotechar='"')
    return df

schemes_df = load_schemes()

def match_scheme_by_keywords(question, schemes_df):
    question_words = set(question.strip().lower().split())

    for _, row in schemes_df.iterrows():
        name_words = set(row['name'].strip().lower().split())
        desc_words = set(row['desc'].strip().lower().split())

        if question_words & name_words or question_words & desc_words:
            return row  # first match

    return None

def qa_interface():
    st.subheader("ЁЯза рд╡рд┐рддреНрддреАрдп рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ")

    if st.button("ЁЯОд рдЖрд╡рд╛рдЬрд╝ рд╕реЗ рдкреВрдЫреЗрдВ"):
        question = listen_to_voice()
        st.write("рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓:", question)

        context = "рднрд╛рд░рдд рд╕рд░рдХрд╛рд░ рдХрдИ рд╡рд┐рддреНрддреАрдп рдпреЛрдЬрдирд╛рдПрдВ рдЪрд▓рд╛рддреА рд╣реИ рдЬреИрд╕реЗ рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдЬрди рдзрди рдпреЛрдЬрдирд╛, рд╕реБрдХрдиреНрдпрд╛ рд╕рдореГрджреНрдзрд┐ рдпреЛрдЬрдирд╛, рдПрд▓рдЖрдИрд╕реА рдмреАрдорд╛, рдПрдирдкреАрдПрд╕ рдпреЛрдЬрдирд╛, рдореБрджреНрд░рд╛ рд▓реЛрди рдпреЛрдЬрдирд╛ рдЖрджрд┐ред"
        response = qa_model(question=question, context=context)
        answer = response['answer']

        # Log to DB
        insert_question(question, answer)

        # Try to match answer with any scheme name
        matched_row = match_scheme_by_keywords(question, schemes_df)


        if matched_row is not None:
            full_answer = f"ЁЯФ╣ {matched_row['name']}\n\nЁЯУЭ {matched_row['desc']}\n\nЁЯФЧ [рдпреЛрдЬрдирд╛ рд╡рд┐рд╡рд░рдг рд▓рд┐рдВрдХ]({matched_row['link']})"
            speak_text(f"{matched_row['name']}ред {matched_row['desc']}")
        else:
            full_answer = answer
            speak_text(answer)

        st.success(full_answer)
